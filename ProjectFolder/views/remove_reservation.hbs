<body class="remove-body">
    <!-- Navigation Bar -->
    {{> header headerClass="remove-reservation-page-header" navClass="remove-reservation-page-navbar" headerTitle="Reservation Dashboard" }}
   
    <div class="container-custom">
        <table id="reservation-table">
            <thead>
                <tr>
                    <th>Reservation ID</th>
                    <th>Username</th>
                    <th>Seat Number</th>
                    <th>Arena</th>
                    <th>Date of Request</th>
                    <th>Date & Time</th>
                    <th>Status</th>
                    <th>Time Remaining</th>
                    <th>Action</th>
                    <th>Edit Reservation</th>
                    <th>Remove Reservation</th>
                </tr>
            </thead>
            <tbody id="remove-ticket-container">
                {{#each reservations}}
                <tr>
                    <td>{{this._id}}</td>
                    <td>{{this.user.name}}</td>
                    <td>{{this.seatNumber}}</td>
                    <td>{{this.stadium.name}}</td>
                    <td>{{formatDate this.reservedAt}}</td>
                    <td>{{formatDate this.reservationStart}} - {{formatTime this.reservationEnd}}</td>
                    <td class="status">{{this.status}}</td>
                    <td>
                        <span class="time-remaining" data-start="{{this.reservationStart}}" data-end="{{this.reservationEnd}}" data-id="{{this._id}}" id="timer-{{this._id}}">--:--</span>
                    </td>
                    <td>
                        <button class="no-show-button" data-id="{{this._id}}" style="display:none;">No Show</button>
                    </td>
                    <td><a href="/modify_reservation_page?id={{this._id}}" class="edit-reservation-button-custom">Edit</a></td>
                    <td>
                        {{#if (or (eq this.status "Expired") (eq this.status "No Show"))}}
                        <button class="remove-reservation-button-custom" data-id="{{this._id}}">Remove</button>
                        {{else}}
                        <button class="remove-reservation-button-custom" data-id="{{this._id}}" disabled>Remove</button>
                        {{/if}}
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        <div class="pagination-controls-custom">
            <button id="prev-page">Previous</button>
            <span id="page-numbers"></span>
            <button id="next-page">Next</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const removeButtons = document.querySelectorAll('.remove-reservation-button-custom');
            const noShowButtons = document.querySelectorAll('.no-show-button');
            const reservationsPerPage = 5;
            let currentPage = 1;

            async function updateExpiredReservations() {
                const timers = document.querySelectorAll('.time-remaining');
                for (let timer of timers) {
                    const start = new Date(timer.getAttribute('data-start'));
                    const end = new Date(timer.getAttribute('data-end'));
                    const now = new Date();
                    const reservationId = timer.getAttribute('data-id');
                    if (now >= end) {
                        await fetch(`/update_reservation_status/${reservationId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status: 'Expired' })
                        }).then(response => response.json())
                          .then(data => {
                              if (!data.success) {
                                  console.error('Failed to update expired reservation: ' + data.message);
                              } else {
                                  await fetch(`/remove_reservation/${reservationId}`, {
                                      method: 'PUT',
                                      headers: {
                                          'Content-Type': 'application/json'
                                      }
                                  });
                              }
                          });
                    }
                }
                // After updating, reload the table data
                loadReservations();
            }

            function updateTable() {
                const rows = document.querySelectorAll('#remove-ticket-container tr');
                rows.forEach((row, index) => {
                    if (index >= (currentPage - 1) * reservationsPerPage && index < currentPage * reservationsPerPage) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                const totalPages = Math.ceil(rows.length / reservationsPerPage);
                document.getElementById('page-numbers').textContent = `Page ${currentPage} of ${totalPages}`;
                document.getElementById('prev-page').disabled = currentPage === 1;
                document.getElementById('next-page').disabled = currentPage === totalPages;
            }

            function loadReservations() {
                fetch('/remove_reservation_data')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const reservations = data.reservations;
                            const tbody = document.getElementById('remove-ticket-container');
                            tbody.innerHTML = ''; // Clear the existing table content

                            reservations.forEach(reservation => {
                                const now = new Date();
                                const isExpired = new Date(reservation.reservationEnd) < now;
                                const isActive = new Date(reservation.reservationStart) <= now && now <= new Date(reservation.reservationEnd);
                                let status = 'Pending';
                                if (isExpired) {
                                    status = 'Expired';
                                } else if (isActive) {
                                    status = 'Active';
                                }

                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${reservation._id}</td>
                                    <td>${reservation.user.name}</td>
                                    <td>${reservation.seatNumber.join(', ')}</td>
                                    <td>${reservation.stadium.name}</td>
                                    <td>${new Date(reservation.reservedAt).toLocaleDateString('en-US')}</td>
                                    <td>${new Date(reservation.reservationStart).toLocaleString('en-US')} - ${new Date(reservation.reservationEnd).toLocaleString('en-US')}</td>
                                    <td class="status">${status}</td>
                                    <td><span class="time-remaining" data-start="${reservation.reservationStart}" data-end="${reservation.reservationEnd}" data-id="${reservation._id}" id="timer-${reservation._id}">--:--</span></td>
                                    <td><button class="no-show-button" data-id="${reservation._id}" style="display:none;">No Show</button></td>
                                    <a href="/modify_reservation_page?id={{this._id}}" class="edit-reservation-button-custom">Edit</a>
                                    <td>${status === 'Expired' || status === 'No Show' ? `<button class="remove-reservation-button-custom" data-id="${reservation._id}">Remove</button>` : `<button class="remove-reservation-button-custom" data-id="${reservation._id}" disabled>Remove</button>`}</td>
                                `;
                                tbody.appendChild(row);
                            });

                            // Re-attach event listeners
                            document.querySelectorAll('.remove-reservation-button-custom').forEach(button => {
                                button.addEventListener('click', function () {
                                    const reservationId = this.getAttribute('data-id');
                                    fetch(`/remove_reservation/${reservationId}`, {
                                        method: 'PUT',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        }
                                    }).then(response => response.json())
                                      .then(data => {
                                          if (data.success) {
                                              alert('Reservation removed successfully');
                                              loadReservations();
                                          } else {
                                              alert('Failed to remove reservation: ' + data.message);
                                          }
                                      });
                                });
                            });

                            document.querySelectorAll('.no-show-button').forEach(button => {
                                button.addEventListener('click', function () {
                                    const reservationId = this.getAttribute('data-id');
                                    fetch(`/update_reservation_status/${reservationId}`, {
                                        method: 'PUT',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ status: 'No Show' })
                                    }).then(response => response.json())
                                      .then(data => {
                                          if (data.success) {
                                              const removeButton = document.querySelector(`.remove-reservation-button-custom[data-id='${reservationId}']`);
                                              const statusCell = document.querySelector(`button.no-show-button[data-id='${reservationId}']`).closest('tr').querySelector('.status');
                                              if (removeButton && statusCell) {
                                                  removeButton.disabled = false;
                                                  statusCell.textContent = 'No Show';
                                              }
                                          } else {
                                              alert('Failed to update reservation status: ' + data.message);
                                          }
                                      });
                                });
                            });

                            updateTable();
                        } else {
                            alert('Failed to fetch reservations: ' + data.message);
                        }
                    });
            }

            document.getElementById('prev-page').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    updateTable();
                }
            });

            document.getElementById('next-page').addEventListener('click', () => {
                const rows = document.querySelectorAll('#remove-ticket-container tr');
                if (currentPage < Math.ceil(rows.length / reservationsPerPage)) {
                    currentPage++;
                    updateTable();
                }
            });

            setInterval(updateTimers, 1000);
            setInterval(updateExpiredReservations, 60000); // Check for expired reservations every minute
            updateTimers();
            loadReservations();
        });
    </script>
</body>
